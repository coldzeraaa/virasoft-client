# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"Requires that exactly one field must be supplied and that field must not be `null`."
directive @oneOf on INPUT_OBJECT

interface BaseModelInterface {
    createdAt: ISO8601DateTime!
    id: ID!
    updatedAt: ISO8601DateTime!
}

type Application implements BaseModelInterface {
    confidential: Boolean!
    createdAt: ISO8601DateTime!
    id: ID!
    name: String!
    redirectUri: String!
    scopes: String!
    secret: String!
    uid: String!
    updatedAt: ISO8601DateTime!
    website: Website
    websiteId: ID
}

"The connection type for Application."
type ApplicationConnection {
    "A list of edges."
    edges: [ApplicationEdge!]!
    "A list of nodes."
    nodes: [Application!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ApplicationEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Application
}

type AssetRole implements BaseModelInterface {
    assetId: ID!
    assetType: String!
    createdAt: ISO8601DateTime!
    id: ID!
    roles: [String!]!
    updatedAt: ISO8601DateTime!
    user: User!
    userId: ID!
    vendor: Vendor!
    vendorId: ID!
    vendorUser: VendorUser!
    vendorUserId: ID!
}

"The connection type for AssetRole."
type AssetRoleConnection {
    "A list of edges."
    edges: [AssetRoleEdge!]!
    "A list of nodes."
    nodes: [AssetRole!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type AssetRoleEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: AssetRole
}

type Brand implements BaseModelInterface {
    code: String!
    createdAt: ISO8601DateTime!
    description: String
    id: ID!
    name: String!
    updatedAt: ISO8601DateTime!
    verified: Boolean!
}

"The connection type for Brand."
type BrandConnection {
    "A list of edges."
    edges: [BrandEdge!]!
    "A list of nodes."
    nodes: [Brand!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type BrandEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Brand
}

type Listing implements BaseModelInterface {
    createdAt: ISO8601DateTime!
    id: ID!
    product: Product!
    productId: ID!
    slug: String!
    updatedAt: ISO8601DateTime!
    website: Website!
    websiteId: ID!
}

"The connection type for Listing."
type ListingConnection {
    "A list of edges."
    edges: [ListingEdge!]!
    "A list of nodes."
    nodes: [Listing!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ListingEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Listing
}

type Merchant implements BaseModelInterface {
    approvedAt: ISO8601DateTime
    cancelledAt: ISO8601DateTime
    createdAt: ISO8601DateTime!
    id: ID!
    listingsCount: Int
    requestedAt: ISO8601DateTime
    status: String!
    updatedAt: ISO8601DateTime!
    vendor: Vendor!
    website: Website!
}

"The connection type for Merchant."
type MerchantConnection {
    "A list of edges."
    edges: [MerchantEdge!]!
    "A list of nodes."
    nodes: [Merchant!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type MerchantEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Merchant
}

type Mutation {
    addImageVariant(
        "Parameters for addImageVariant"
        input: addImageVariantInput!
    ): Variant
    createApplication(
        "Parameters for createApplication"
        input: createApplicationInput!
    ): Application
    createAssetRole(
        "Parameters for createAssetRole"
        input: createAssetRoleInput!
    ): AssetRole
    createBrand(
        "Parameters for createBrand"
        input: createBrandInput!
    ): Brand
    createListing(
        "Parameters for createListing"
        input: createListingInput!
    ): Listing
    createMerchant(
        "Parameters for createMerchant"
        input: createMerchantInput!
    ): Merchant
    createProduct(
        "Parameters for createProduct"
        input: createProductInput!
    ): Product
    createUser(
        "Parameters for createUser"
        input: createUserInput!
    ): User
    createVariant(
        "Parameters for createVariant"
        input: createVariantInput!
    ): Variant
    createVendor(
        "Parameters for createVendor"
        input: createVendorInput!
    ): Vendor
    createVendorUser(
        "Parameters for createVendorUser"
        input: createVendorUserInput!
    ): VendorUser
    createWebsite(
        "Parameters for createWebsite"
        input: createWebsiteInput!
    ): Website
    destroyApplication(
        "Parameters for destroyApplication"
        input: destroyApplicationInput!
    ): Application
    destroyAssetRole(
        "Parameters for destroyAssetRole"
        input: destroyAssetRoleInput!
    ): AssetRole
    destroyBrand(
        "Parameters for destroyBrand"
        input: destroyBrandInput!
    ): Brand
    destroyListing(
        "Parameters for destroyListing"
        input: destroyListingInput!
    ): Listing
    destroyMerchant(
        "Parameters for destroyMerchant"
        input: destroyMerchantInput!
    ): Merchant
    destroyProduct(
        "Parameters for destroyProduct"
        input: destroyProductInput!
    ): Product
    destroyVariant(
        "Parameters for destroyVariant"
        input: destroyVariantInput!
    ): Variant
    destroyVendor(
        "Parameters for destroyVendor"
        input: destroyVendorInput!
    ): Vendor
    destroyVendorUser(
        "Parameters for destroyVendorUser"
        input: destroyVendorUserInput!
    ): VendorUser
    destroyWebsite(
        "Parameters for destroyWebsite"
        input: destroyWebsiteInput!
    ): Website
    updateApplication(
        "Parameters for updateApplication"
        input: updateApplicationInput!
    ): Application
    updateAssetRole(
        "Parameters for updateAssetRole"
        input: updateAssetRoleInput!
    ): AssetRole
    updateBrand(
        "Parameters for updateBrand"
        input: updateBrandInput!
    ): Brand
    updateListing(
        "Parameters for updateListing"
        input: updateListingInput!
    ): Listing
    updateMerchant(
        "Parameters for updateMerchant"
        input: updateMerchantInput!
    ): Merchant
    updateProduct(
        "Parameters for updateProduct"
        input: updateProductInput!
    ): Product
    updateVariant(
        "Parameters for updateVariant"
        input: updateVariantInput!
    ): Variant
    updateVendor(
        "Parameters for updateVendor"
        input: updateVendorInput!
    ): Vendor
    updateVendorUser(
        "Parameters for updateVendorUser"
        input: updateVendorUserInput!
    ): VendorUser
    updateWebsite(
        "Parameters for updateWebsite"
        input: updateWebsiteInput!
    ): Website
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type Product implements BaseModelInterface {
    approved: Boolean!
    approvedAt: ISO8601DateTime
    brand: Brand
    condition: String!
    createdAt: ISO8601DateTime!
    data: JSON
    description: String
    id: ID!
    info: JSON
    name: String!
    productCat: String
    published: Boolean!
    slug: String!
    title: String!
    updatedAt: ISO8601DateTime!
    variants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): VariantConnection!
    vendor: Vendor!
}

"The connection type for Product."
type ProductConnection {
    "A list of edges."
    edges: [ProductEdge!]!
    "A list of nodes."
    nodes: [Product!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ProductEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Product
}

type Query {
    application(id: ID!): Application
    applications(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ApplicationFilter,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        sort: SortFilter
    ): ApplicationConnection!
    assetRole(id: ID!): AssetRole
    assetRoles(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: AssetRoleFilter,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        sort: SortFilter
    ): AssetRoleConnection!
    brand(id: ID!): Brand
    brands(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: BrandFilter,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        sort: SortFilter
    ): BrandConnection!
    listing(id: ID!): Listing
    listings(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListingFilter,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        sort: SortFilter
    ): ListingConnection!
    me: User
    merchant(id: ID!): Merchant
    merchants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: MerchantFilter,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        sort: SortFilter
    ): MerchantConnection!
    product(id: ID!): Product
    products(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ProductFilter,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        sort: SortFilter
    ): ProductConnection!
    user(id: ID!): User
    users(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: UserFilter,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        sort: SortFilter
    ): UserConnection!
    variant(id: ID!): Variant
    variants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: VariantFilter,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        sort: SortFilter
    ): VariantConnection!
    vendor(id: ID!): Vendor
    vendorUser(id: ID!): VendorUser
    vendorUsers(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: VendorUserFilter,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        sort: SortFilter
    ): VendorUserConnection!
    vendors(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: VendorFilter,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        sort: SortFilter
    ): VendorConnection!
    website(id: ID!): Website
    websites(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: WebsiteFilter,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        sort: SortFilter
    ): WebsiteConnection!
}

type User implements BaseModelInterface {
    assetRoles: [AssetRole!]
    createdAt: ISO8601DateTime!
    email: String
    firstName: String
    gender: String
    id: ID!
    lastName: String
    mobile: String
    nickName: String
    registerNum: String
    role: Int
    roleMatrix: JSON
    updatedAt: ISO8601DateTime!
}

"The connection type for User."
type UserConnection {
    "A list of edges."
    edges: [UserEdge!]!
    "A list of nodes."
    nodes: [User!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type UserEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: User
}

type Variant implements BaseModelInterface {
    barcode: String
    createdAt: ISO8601DateTime!
    depth: Float
    description: String
    height: Float
    id: ID!
    images(
        "mini, medium, product"
        size: String
    ): [String!]!
    isMaster: Boolean!
    merchantSku: String
    netWeight: Float
    optionsText: String
    position: Int
    price: Float!
    product: Product!
    salePrice: Float
    sku: String!
    updatedAt: ISO8601DateTime!
    weight: Float
    width: Float
}

"The connection type for Variant."
type VariantConnection {
    "A list of edges."
    edges: [VariantEdge!]!
    "A list of nodes."
    nodes: [Variant!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type VariantEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Variant
}

type Vendor implements BaseModelInterface {
    address: String
    code: String
    createdAt: ISO8601DateTime!
    email: String
    id: ID!
    name: String
    phone: String
    productsCount: Int
    registerNum: String
    updatedAt: ISO8601DateTime!
    website: String
}

"The connection type for Vendor."
type VendorConnection {
    "A list of edges."
    edges: [VendorEdge!]!
    "A list of nodes."
    nodes: [Vendor!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type VendorEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Vendor
}

type VendorUser implements BaseModelInterface {
    addedBy: User!
    createdAt: ISO8601DateTime!
    email: String
    firstName: String
    id: ID!
    lastName: String
    mobile: String
    role: String!
    status: String!
    updatedAt: ISO8601DateTime!
    user: User!
    vendor: Vendor!
}

"The connection type for VendorUser."
type VendorUserConnection {
    "A list of edges."
    edges: [VendorUserEdge!]!
    "A list of nodes."
    nodes: [VendorUser!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type VendorUserEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: VendorUser
}

type Website implements BaseModelInterface {
    createdAt: ISO8601DateTime!
    domain: String!
    id: ID!
    index: String!
    name: String!
    updatedAt: ISO8601DateTime!
}

"The connection type for Website."
type WebsiteConnection {
    "A list of edges."
    edges: [WebsiteEdge!]!
    "A list of nodes."
    nodes: [Website!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type WebsiteEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Website
}

"Sort Direction"
enum SortDirection {
    "Ascending"
    asc
    "Descending"
    desc
}

"Role"
enum VendorUserRole {
    "An admin user"
    admin
    "A regular member user"
    member
}

"An ISO 8601-encoded datetime"
scalar ISO8601DateTime

"Represents untyped JSON"
scalar JSON

scalar Upload

input ApplicationFilter {
    createdAt: DateFilter
    id: IDFilter
    updatedAt: DateFilter
}

input AssetRoleFilter {
    createdAt: DateFilter
    id: IDFilter
    updatedAt: DateFilter
}

input BoolFilter {
    "equals to"
    eq: Boolean
    "not equals to"
    notEq: Boolean
    "is null ?"
    notNull: Boolean
    "is null ?"
    null: Boolean
}

input BrandFilter {
    createdAt: DateFilter
    id: IDFilter
    updatedAt: DateFilter
}

input DateFilter {
    "equals to"
    eq: String
    "Greater than"
    gt: String
    "Greater than or equals"
    gteq: String
    "Less than"
    lt: String
    "Less than or equals"
    lteq: String
    "not equals to"
    notEq: String
    "is null ?"
    notNull: Boolean
    "is null ?"
    null: Boolean
}

input IDFilter {
    "is null ?"
    blank: Boolean
    "equals to"
    eq: ID
    "Greater than"
    gt: Int
    "Greater than or equals"
    gteq: Int
    "in: Matches any values in giver array"
    in: [ID!]
    "Less than"
    lt: Int
    "Less than or equals"
    lteq: Int
    "not equals to"
    notEq: ID
    "in: Matches none of values in giver array"
    notIn: [ID!]
    "Starts with"
    start: Int
}

input IntFilter {
    "is blank ?"
    blank: Boolean
    "equals to"
    eq: Float
    "Greater than"
    gt: Float
    "Greater than or equals"
    gteq: Float
    "in: Matches none of values in giver array"
    in: [Float!]
    "Less than"
    lt: Float
    "Less than or equals"
    lteq: Float
    "not equals to"
    notEq: Float
    "in: Matches none of values in giver array"
    notIn: [Float!]
    "is null ?"
    null: Boolean
}

input ListingFilter {
    createdAt: DateFilter
    id: IDFilter
    updatedAt: DateFilter
}

input MerchantFilter {
    createdAt: DateFilter
    id: IDFilter
    updatedAt: DateFilter
}

input ProductFilter {
    approved: BoolFilter
    brandId: IDFilter
    condition: StringFilter
    createdAt: DateFilter
    description: StringFilter
    id: IDFilter
    name: StringFilter
    productCat: StringFilter
    published: BoolFilter
    slug: StringFilter
    title: StringFilter
    updatedAt: DateFilter
    vendorId: IDFilter
}

input SortFilter {
    direction: SortDirection
    field: String!
}

input StringFilter {
    "is blank ?"
    blank: Boolean
    "contains"
    cont: String
    "ends with"
    end: String
    "equals to"
    eq: String
    "in: Matches any values in giver array"
    in: [String!]
    "not equals to"
    notEq: String
    "in: Matches none of values in giver array"
    notIn: [String!]
    "is null ?"
    notNull: Boolean
    "is null ?"
    null: Boolean
    "starts with"
    start: String
}

input UserFilter {
    createdAt: DateFilter
    email: StringFilter
    firstName: StringFilter
    gender: StringFilter
    id: IDFilter
    lastName: StringFilter
    mobile: StringFilter
    nickName: StringFilter
    registerNum: StringFilter
    role: IntFilter
    unconfirmedEmail: StringFilter
    unconfirmedMobile: StringFilter
    updatedAt: DateFilter
}

input VariantFilter {
    createdAt: DateFilter
    id: IDFilter
    updatedAt: DateFilter
}

input VendorFilter {
    createdAt: DateFilter
    id: IDFilter
    name: StringFilter
    updatedAt: DateFilter
}

input VendorUserFilter {
    createdAt: DateFilter
    firstName: StringFilter
    id: IDFilter
    updatedAt: DateFilter
}

input WebsiteFilter {
    createdAt: DateFilter
    domain: StringFilter
    id: IDFilter
    index: StringFilter
    name: StringFilter
    updatedAt: DateFilter
}

"Autogenerated input type of addImageVariant"
input addImageVariantInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    images: [Upload!]!
    variantId: ID
}

"Autogenerated input type of createApplication"
input createApplicationInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    confidential: Boolean!
    name: String!
    redirectUri: String!
    scopes: String!
    secret: String!
    uid: String!
    websiteId: String!
}

"Autogenerated input type of createAssetRole"
input createAssetRoleInput {
    "Asset id of vendor, or website"
    assetId: ID!
    "Asset type. Supp::Vendor, Supp::Website, Supp::Merchant"
    assetType: String!
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    "roles"
    roles: [String!]!
    "First name"
    vendorId: ID!
    "Employee id. supp_vendor_users"
    vendorUserId: ID!
}

"Autogenerated input type of createBrand"
input createBrandInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    code: String!
    description: String
    name: String!
    verified: Boolean
}

"Autogenerated input type of createListing"
input createListingInput {
    approved: Boolean
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    productId: ID!
    published: Boolean
    slug: String
    websiteId: ID!
}

"Autogenerated input type of createMerchant"
input createMerchantInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    vendorId: ID!
    websiteId: ID!
}

"Autogenerated input type of createProduct"
input createProductInput {
    approved: Boolean
    brandId: ID
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    condition: String!
    data: JSON
    description: String
    info: JSON
    name: String!
    price: Float!
    productCat: String
    published: Boolean
    sku: String!
    slug: String!
    title: String!
    vendorId: ID!
}

"Autogenerated input type of createUser"
input createUserInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    email: String
    firstName: String!
    gender: String
    lastName: String
    mobile: String!
}

"Autogenerated input type of createVariant"
input createVariantInput {
    barcode: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    depth: Float
    description: String
    height: Float
    images: [Upload!]
    isMaster: Boolean
    merchantSku: String
    netWeight: Float
    position: Int
    price: Float!
    productId: ID!
    sku: String!
    weight: Float
    width: Float
}

"Autogenerated input type of createVendor"
input createVendorInput {
    address: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    code: String!
    email: String
    name: String!
    phone: String
    registerNum: String
    website: String
}

"Autogenerated input type of createVendorUser"
input createVendorUserInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    email: String
    firstName: String
    lastName: String
    mobile: String
    role: VendorUserRole!
    status: Int
    userId: ID!
    vendorId: ID!
}

"Autogenerated input type of createWebsite"
input createWebsiteInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    code: String!
    name: String!
}

"Autogenerated input type of destroyApplication"
input destroyApplicationInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
}

"Autogenerated input type of destroyAssetRole"
input destroyAssetRoleInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
}

"Autogenerated input type of destroyBrand"
input destroyBrandInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
}

"Autogenerated input type of destroyListing"
input destroyListingInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
}

"Autogenerated input type of destroyMerchant"
input destroyMerchantInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
}

"Autogenerated input type of destroyProduct"
input destroyProductInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
}

"Autogenerated input type of destroyVariant"
input destroyVariantInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
}

"Autogenerated input type of destroyVendor"
input destroyVendorInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
}

"Autogenerated input type of destroyVendorUser"
input destroyVendorUserInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
}

"Autogenerated input type of destroyWebsite"
input destroyWebsiteInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
}

"Autogenerated input type of updateApplication"
input updateApplicationInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    confidential: Boolean
    id: ID!
    name: String
    redirectUri: String
    scopes: String
    secret: String
    uid: String
}

"Autogenerated input type of updateAssetRole"
input updateAssetRoleInput {
    "Asset id"
    assetId: ID
    "Asset type. Supp::Vendor, Supp::Website, Supp::Merchant"
    assetType: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
    "roles"
    roles: [String!]
    "First name"
    vendorId: ID
    "Employee id. supp_vendor_users"
    vendorUserId: ID
}

"Autogenerated input type of updateBrand"
input updateBrandInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    code: String
    description: String
    id: ID!
    name: String
    verified: Boolean
}

"Autogenerated input type of updateListing"
input updateListingInput {
    approved: Boolean
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
    productId: ID
    published: Boolean
    slug: String
    websiteId: ID
}

"Autogenerated input type of updateMerchant"
input updateMerchantInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    id: ID!
    vendorId: ID
    websiteId: ID
}

"Autogenerated input type of updateProduct"
input updateProductInput {
    approved: Boolean
    brandId: ID
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    condition: String
    data: JSON
    description: String
    id: ID!
    info: JSON
    name: String
    productCat: String
    published: Boolean
    slug: String
    title: String
    vendorId: ID
}

"Autogenerated input type of updateVariant"
input updateVariantInput {
    barcode: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    depth: Float
    description: String
    height: Float
    id: ID!
    isMaster: Boolean
    merchantSku: String
    netWeight: Float
    position: Int
    price: Float
    productId: ID
    sku: String
    weight: Float
    width: Float
}

"Autogenerated input type of updateVendor"
input updateVendorInput {
    address: String
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    code: String
    email: String
    id: ID!
    name: String
    phone: String
    registerNum: String
    website: String
}

"Autogenerated input type of updateVendorUser"
input updateVendorUserInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    email: String
    firstName: String
    id: ID!
    lastName: String
    mobile: String
    role: VendorUserRole
    status: Int
    userId: ID
    vendorId: ID
}

"Autogenerated input type of updateWebsite"
input updateWebsiteInput {
    "A unique identifier for the client performing the mutation."
    clientMutationId: String
    code: String
    id: ID!
    name: String
}
